name: $(BuildDefinitionName)_$(SourceBranchName)_$(Build.Reason)_1.$(Year:yy)$(DayOfYear).$(Hours)$(Minutes)

resources:
 repositories:
   - repository: self

pool:
  vmImage: 'windows-latest'

trigger:
  branches:
    include:
    - /*
  paths:
    exclude:
    - README.md

pr:
  paths:
    exclude:
    - README.md

variables:
  - name : BuildPlatform
    value: 'any cpu'
  - name : BuildConfiguration
    value: 'release'
  - name : Solution
    value: '**\*.sln'

stages:
  - stage: Build
    displayName: Build Stage
    jobs:
      - job: buildjob
        displayName: Build Job
        steps:
          - checkout: self
            submodules: true
    
          - task: NuGetToolInstaller@0
            displayName: 'Use NuGet 5.5.1'
            inputs:
              versionSpec: 5.5.1

          - task: NuGetCommand@2
            displayName: 'NuGet restore'
            inputs:
              restoreSolution: '$(Solution)'

          - task: Npm@1
            displayName: NPM Install pnpm
            inputs:
              command: custom
              customCommand: install -g pnpm@5.1.8  

          - task: VSBuild@1
            displayName: Build Solution
            inputs:
              solution: $(Solution)
              vsVersion: latest
              platform: $(BuildPlatform)
              configuration: $(BuildConfiguration)
              maximumCpuCount: true

          - task: PublishPipelineArtifact@1
            displayName: Publish Pipeline Artifacts
            inputs:
              path: $(System.DefaultWorkingDirectory)
              artifact: drop
                          
      - job: testjob
        displayName: Test Job
        dependsOn: buildjob
        steps:  
          - download: current

          - task: VSTest@2
            displayName: Run Unit Tests
            inputs:
              testSelector: testAssemblies
              testAssemblyVer2: |
                **\Plugins*\**\*test*.dll
                !**\*TestAdapter.dll
                !**\obj\**
              searchFolder: $(Pipeline.Workspace)
              codeCoverageEnabled: true
              runInParallel: true
              runOnlyImpactedTests: true

  - stage: Deployment_Staging
    
    displayName: Deployment Staging
    dependsOn: 'Build'
    condition: succeeded()
    jobs:
    - deployment: DeployJob      
      displayName: Deployment Staging 
      environment: 'Deployment Staging'
      variables:
        - group: replaceRepo.D365CDEnvironment
      strategy:
        runOnce:
          deploy:
            steps:
            - task: PowerShell@2
              displayName: 'Deploy Solution'
              inputs:
                targetType: filePath
                filePath: '$(Pipeline.Workspace)/drop/Solutions/bin/Release/Scripts/SolutionDeploy.ps1'
                arguments: '-DeployServerUrl $(d365url) -UserName $(d365username) -Password $(d365password) -PipelinePath $(Pipeline.Workspace)'

# - stage: Test
    
#    displayName: Test
#    dependsOn: 'Deployment_Staging'
#    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'),notIn(variables['Build.Reason'], 'IndividualCI', 'BatchedCI','PullRequest'))
#    jobs:
#    - deployment: DeployJob      
#      displayName: Test 
#      environment: 'Test'
#      variables:
#        - group: replaceRepo.D365TestEnvironment
#      strategy:
#        runOnce:
#          deploy:
#            steps:
#            - task: PowerShell@2
#              displayName: 'Deploy Solution'
#              inputs:
#                targetType: filePath
#                filePath: '$(Pipeline.Workspace)/drop/Solutions/bin/Release/Scripts/SolutionDeploy.ps1'
#                arguments: '-DeployServerUrl $(d365url) -UserName $(d365username) -Password $(d365password) -PipelinePath $(Pipeline.Workspace)'