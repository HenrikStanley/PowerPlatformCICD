name: 1.0.0$(Rev:.r)

resources:
- repo: self

pool:
  name: Hosted VS2017

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

pr:
  paths:
    exclude:
    - README.md

variables:
  - name : BuildPlatform
    value: 'any cpu'
  - name : BuildConfiguration
    value: 'release'
  - name : Solution
    value: '**\*.sln'
  - group: replaceRepo.D365CDEnvironment

stages:
  - stage: Build
    displayName: Build Stage
    jobs:
      - job: buildjob
        displayName: Build Job
        steps:
          - powershell: |
              $path = $path = "$(System.DefaultWorkingDirectory)/Solutions/packageSolution/Other/Solution.xml"
              [XML]$xml = Get-Content $path
              $solutionversion = $xml.ImportExportXml.SolutionManifest.Version
              Write-Host "##vso[build.updatebuildnumber]$solutionversion"
            displayName: 'Set Build Number from D365 Solution'
    
          - task: NuGetToolInstaller@0
            displayName: 'Use NuGet 4.4.1'
            inputs:
              versionSpec: 4.4.1

          - task: NuGetCommand@2
            displayName: 'NuGet restore'
            inputs:
              restoreSolution: '$(Solution)'

          - task: VSBuild@1
            displayName: 'Build Solution'
            inputs:
              solution: '$(Solution)'
              vsVersion: '15.0'
              platform: '$(BuildPlatform)'
              configuration: '$(BuildConfiguration)'
              msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactstagingdirectory)\\"'
          
          - task: VSTest@2
            displayName: Run Unit and UI Tests
            inputs:
              testSelector: 'testAssemblies'
              testAssemblyVer2: |
                **\*test*.dll
                !**\*TestAdapter.dll
                !**\obj\**
              searchFolder: '$(System.DefaultWorkingDirectory)'

          - task: PowerShell@2
            displayName: 'Pack Solution and Run Solution Checker'
            inputs:
              targetType: filePath
              filePath: 'Solutions/Scripts/SolutionPack.ps1'
              arguments: '-aadTenant $(aadTenant) -aadPowerAppId $(aadPowerAppId) -aadPowerAppSecret $(aadPowerAppSecret)'

          - task: ArchiveFiles@2
            displayName: 'Archive Reference Data to: $(build.artifactstagingdirectory)'
            inputs:
              rootFolderOrFile: 'Solutions/ReferenceData'
              includeRootFolder: false
              archiveFile: '$(build.artifactstagingdirectory)/PackageDeployer/bin/Release/PkgFolder/AddName.data.zip'
              archiveType: zip

          - task: CopyFiles@2
            displayName: 'Copy Build Artifact to: $(build.artifactstagingdirectory)'
            inputs:
              SourceFolder: '$(system.defaultworkingdirectory)'
              Contents: '**\bin\$(BuildConfiguration)\**'
              TargetFolder: '$(build.artifactstagingdirectory)'

          - task: PublishSymbols@2
            displayName: 'Publish symbols path'
            inputs:
              SearchPattern: '**\bin\**\*.pdb'
              PublishSymbols: false
            continueOnError: true


          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact: drop'
            inputs:
              path: '$(build.artifactstagingdirectory)'
              artifact: drop

  - stage: Deployment
    
    displayName: Deployment
    dependsOn: 'Build'
    condition: succeeded()
    jobs:
    - deployment: DeployJob      
      displayName: Deployment Staging 
      environment: 'Deployment Staging'
      variables:
        - group: replaceRepo.D365CDEnvironment
      strategy:
        runOnce:
          deploy:
            steps:
            - task: PowerShell@2
              displayName: 'Deploy Solution'
              inputs:
                targetType: filePath
                filePath: '$(Pipeline.Workspace)/drop/Solutions/bin/Release/Scripts/SolutionDeploy.ps1'
                arguments: '-DeployServerUrl $(d365url) -UserName $(d365username) -Password $(d365password) -PipelinePath $(Pipeline.Workspace)'